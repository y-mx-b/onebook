* onebook
  :PROPERTIES:
  :CUSTOM_ID: onebook
  :END:
A universal bookmark manager (heavy WIP).

Current state:
- Can import bookmarks from some Chromium browsers and Safari (nested folders working).
- Can manually add and remove bookmarks
  + No bash/zsh completions as of yet (will be added eventually)

** Table of Contents
- [[#introduction][Introduction]]
  + [[#why-create-onebook][Why Create Onebook?]]
  + [[#how-does-it-work][How Does It Work?]]
- [[#downloading][Downloading]]
  + [[#mint][Mint]]
  + [[#building-from-source][Building From Source]]
- [[#basic-usage][Basic Usage]]
- [[#todo][TODO]]
  + [[#documentation][Documentation]]
  + [[#functionality][Functionality]]
    - [[#importing][Importing]]
    - [[#configuration][Configuration]]
  + [[#browser-support][Browser Support]]
  + [[#miscellaneous][Miscellaneous]]

** Introduction
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:
*** Why Create Onebook?
  :PROPERTIES:
  :CUSTOM_ID: why-create-onebook
  :END:
I use a lot of browsers. I regularly switch between Safari, Qutebrowser, and
Ungoogled Chromium (and sometimes Firefox as well) with little rhyme or reason.
But then, sometimes, you also want to be able to access all your bookmarks from
each browser without having to manually import and export, or use different
tools to import and export. Sometimes you also just want to be able to hit a
button and open a website, any website you want.

The ability to easily import to and export from a single, local source, and
manage your bookmarks right from there, as well as quickly open your bookmarks in
a browser.

There is, naturally, a tool that does this. [[https://github.com/jarun/buku][Buku]]. But it doesn't natively
support Safari, and there are other browsers that it can't automatically import
from. Also, it's written in Python, and you must extend its capabilites in
Python (or perhaps write a wrapper for its library in another language). Also,
because it uses [[https://sqlite.org/index.html][SQLite]], it is incredibly fast, but you have to be able to parse
SQLite databases in order to interact with the data yourself, without Buku.

(I'm sure there are other tools out there, and I'm sure Buku is an incredible
bookmark manager as well. It just didn't suit me all too well, and I thought
creating a bookmark manager I'd like would be an interesting project.)

Enter Onebook.

Just like [[https://www.passwordstore][pass]], the standard Unix password manager, Onebook uses the filesystem
to store its data in a very UNIX-y way (perhaps I'll consider adding encryption
to bookmarks as well, though I don't see why that'd be necessary). That way,
anyone can create scripts to interact with the data in just about any language.
Python, Perl, JavaScript, or just plain shellâ€”all of it works just as well.
Anything that can interact with files and directories will be just as capable.

*** How Does It work?
    :PROPERTIES:
    :CUSTOM_ID: how-does-it-work
    :END:

*NOTE: This description may not be accurate, as Onebook is still under heavy*
*development. Please refer to the information under [[#functionality][Functionality]] in order to*
*get an accurate grasp of where Onebook is currently at.*

First, Onebook will parse bookmarks from any browser of your choosing. Since
each browser has its own method for storing bookmarks, there is a lot of work
that goes into writing parsers for each browser's bookmark system.

Onebook will also be able to take Netscape-style HTML bookmark files (just about
every browser allows you to export to Netscape-compatible HTML).

Bookmarks are aggregated and managed under a storage directory (=~/.bookmarks/=
by default).

Bookmark folders are made into folders on the filesystem, while individual
bookmarks are stored as files with the bookmark's title as the file's name. Any
data pertaining to the bookmark will be stored within the file (currently, in
TOML).

You will be able to edit this data manually, or through Onebook.

You can then export bookmarks from Onebook to any of the formats supported
browsers use to store their own bookmarks, or to HTML. You will also be able to
automatically sync bookmarks between browsers with a single command: =onebook sync=.
** Downloading
   :PROPERTIES:
   :CUSTOM_ID: downloading
   :END:
*** [[https://github.com/yonaskolb/Mint][Mint]] (not usable yet)
    :PROPERTIES:
    :CUSTOM_ID: mint
    :END:
Download mint and run the following command.

#+BEGIN_SRC
mint install luardemin/onebook
#+END_SRC

*** Building From Source (recommended)
    :PROPERTIES:
    :CUSTOM_ID: building-from-source
    :END:
*NOTE: Requires [[https://github.com/git/git][git]] and the [[https://swift.org/package-manager/][Swift Package Manager]].*

First, download the GitHub repository using the following command:

#+BEGIN_SRC
git clone https://github.com/luardemin/onebook.git
#+END_SRC

Then do =cd onebook= to enter the directory. You can then build with =swift
build= or run with =swift run onebook <subcommand>=.

** Basic Usage
   :PROPERTIES:
   :CUSTOM_ID: basic-usage
   :END:
Make sure =onebook= is on your [[https://www.putorius.net/set-path-variable-linux.html][path]], then run:

#+BEGIN_SRC
onebook init
#+END_SRC

To display the help message:

#+BEGIN_SRC
$ onebook -h

OVERVIEW: A universal bookmark management utility.

USAGE: onebook <subcommand>

OPTIONS:
  -h, --help              Show help information.

SUBCOMMANDS:
  import                  Import bookmarks from a browser.
  init                    Initialize the program.
  create                  Create a new bookmark.
  remove                  Remove a bookmark.
  edit                    Edit a bookmark (WIP).
  clean                   Remove empty folders.

  See 'onebook help <subcommand>' for detailed help.
#+END_SRC

** TODO
   :PROPERTIES:
   :CUSTOM_ID: todo
   :END:
*** Documentation
  :PROPERTIES:
  :CUSTOM_ID: documentation
  :END:
- [X] [[https://github.com/luardemin/onebook/blob/master/Documentation/Bookmark%20Manager/BookmarkManager.md][Back-End]]
  - Very much in-progress, nowhere near complete
- [X] Manpage
  - Will write a script to automatically install it
  - Someday soon
- [X] Incredibly cryptic help message (will be expanded once more functionality is implemented)
  - a Unix classic, along with [[https://www.gnu.org/fun/jokes/ed-msg.html][beatifully uninformative error messages]]
*** Functionality
    :PROPERTIES:
    :CUSTOM_ID: functionality
    :END:
- [-] Direct bookmark management (WIP)
  + [X] Adding bookmarks
  + [ ] Removing bookmarks
  + [ ] Moving bookmarks
  + [ ] Purging empty bookmark folders
  + [ ] Clearing all bookmarks
- [ ] [[#importing][Importing bookmarks]]
  - In-progress, code must be refactored to handle nested folders (I forgot about those)
  - [ ] Multi-User support
- [ ] Exporting bookmarks
  - [ ] Multi-User support
- [ ] Syncing bookmarks
  - [ ] Multi-User support
- [ ] Backups (for browsers and aggregate storage)
  - [ ] Multi-User support
- [ ] [[#configuration][Configuration]] (shell commands to set preferences in a plist?)

**** Importing
     :PROPERTIES:
     :CUSTOM_ID: importing
     :END:

- [X] Chromium
  + [X] Implement Chromium bookmark parsing
  + [X] Implementing Chromium bookmark data storage
- [X] Chrome
  + Literally the same as Chromium, I just need to change file/directory
    paths
- [X] Safari
  + [X] Implement Safari bookmark parsing
  + [X] Implement Safari bookmark data storage
- [X] Brave
  + Also literally the same as Chromium
- [ ] Firefox (this might take a while, I /really/ don't want to have to learn SQL)
  + [ ] Implement Firefox bookmark parsing
  + [ ] Implement Firefox bookmark data storage
- [ ] Qutebrowser (shouldn't be that bad)
  + [ ] Implement Qutebrowser bookmark parsing
  + [ ] Implement Qutebrowser bookmark data storage
- [ ] Min (this will take a long time)
  + [ ] Implement Min bookmark parsing
  + [ ] Implement Min bookmark data storage

**** Configuration
     :PROPERTIES:
     :CUSTOM_ID: configuration
     :END:
- [ ] Implement config file
  - [ ] Set default browser for import/export
  - [ ] Set custom storage directory
  - [ ] Set default browsers to sync
- [ ] Allow for relocation of bookmark directory

*** Browser support
  :PROPERTIES:
  :CUSTOM_ID: browser-support
  :END:

*Ordered by priority*

| Browser     | Import From | Export To | Sync |
|-------------+-------------+-----------+------|
| Chromium    | O           | X         | X    |
| Chrome      | O           | X         | X    |
| Safari      | O           | X         | X    |
| Brave       | O           | X         | X    |
| Edge        | X           | X         | X    |
| Qutebrowser | X           | X         | X    |
| Firefox     | X           | X         | X    |
| Min         | X           | X         | X    |
*** Operating System Support

*Ordered by priority*

| Operating System | Compiles | Functional |
|------------------+----------+------------|
| macOS            | O        | O          |
| Ubuntu           | O        | O          |
| Windows          | ?        | ?          |

*Note: I can't get Windows to compile for me. If anyone can, that'd be a great*
*help.*

*** Miscellaneous
  :PROPERTIES:
  :CUSTOM_ID: miscellaneous
  :END:

- [ ] An install script
- [ ] Maybe a homebrew formula?
- [ ] bash/zsh autocomplete
